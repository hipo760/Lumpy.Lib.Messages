// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Htf.Schemas.V1.Fbs.Market
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Tick : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Tick GetRootAsTick(ByteBuffer _bb) { return GetRootAsTick(_bb, new Tick()); }
  public static Tick GetRootAsTick(ByteBuffer _bb, Tick obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Tick __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Exchange { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExchangeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetExchangeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetExchangeArray() { return __p.__vector_as_array<byte>(4); }
  public string Symbol { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSymbolBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSymbolBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSymbolArray() { return __p.__vector_as_array<byte>(6); }
  public Htf.Schemas.V1.Fbs.Market.Timestamp? Timestamp { get { int o = __p.__offset(8); return o != 0 ? (Htf.Schemas.V1.Fbs.Market.Timestamp?)(new Htf.Schemas.V1.Fbs.Market.Timestamp()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Htf.Schemas.V1.Fbs.Market.Money? Price { get { int o = __p.__offset(10); return o != 0 ? (Htf.Schemas.V1.Fbs.Market.Money?)(new Htf.Schemas.V1.Fbs.Market.Money()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Htf.Schemas.V1.Fbs.Market.Money? Volume { get { int o = __p.__offset(12); return o != 0 ? (Htf.Schemas.V1.Fbs.Market.Money?)(new Htf.Schemas.V1.Fbs.Market.Money()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Htf.Schemas.V1.Fbs.Market.Side Side { get { int o = __p.__offset(14); return o != 0 ? (Htf.Schemas.V1.Fbs.Market.Side)__p.bb.GetSbyte(o + __p.bb_pos) : Htf.Schemas.V1.Fbs.Market.Side.Buy; } }

  public static void StartTick(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddExchange(FlatBufferBuilder builder, StringOffset exchangeOffset) { builder.AddOffset(0, exchangeOffset.Value, 0); }
  public static void AddSymbol(FlatBufferBuilder builder, StringOffset symbolOffset) { builder.AddOffset(1, symbolOffset.Value, 0); }
  public static void AddTimestamp(FlatBufferBuilder builder, Offset<Htf.Schemas.V1.Fbs.Market.Timestamp> timestampOffset) { builder.AddStruct(2, timestampOffset.Value, 0); }
  public static void AddPrice(FlatBufferBuilder builder, Offset<Htf.Schemas.V1.Fbs.Market.Money> priceOffset) { builder.AddStruct(3, priceOffset.Value, 0); }
  public static void AddVolume(FlatBufferBuilder builder, Offset<Htf.Schemas.V1.Fbs.Market.Money> volumeOffset) { builder.AddStruct(4, volumeOffset.Value, 0); }
  public static void AddSide(FlatBufferBuilder builder, Htf.Schemas.V1.Fbs.Market.Side side) { builder.AddSbyte(5, (sbyte)side, 0); }
  public static Offset<Htf.Schemas.V1.Fbs.Market.Tick> EndTick(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Htf.Schemas.V1.Fbs.Market.Tick>(o);
  }
};


}
